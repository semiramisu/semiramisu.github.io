---
import YukinaConfig from "../../yukina.config";
import GlobalStyles from "./GlobalStyles.astro";
import ScriptSetup from "./ScriptSetup.astro";
import CriticalStyles from "./CriticalStyles.astro";
import AsyncStyles from "./AsyncStyles.astro";
import ResourcePreload from "./ResourcePreload.astro";
import AnimationController from "./AnimationController.astro";
import ServiceWorkerSetup from "./ServiceWorkerSetup.astro";
import StructuredData from "./StructuredData.astro";

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const isHomePage = Astro.url.pathname === '/' || 
                   Astro.url.pathname === '/index.html';

// 動的OGP画像のURLを生成
const ogImageUrl = Astro.url.pathname.startsWith('/posts/') 
  ? new URL(`/og${Astro.url.pathname.replace(/\/$/, '')}.png`, Astro.site).toString()
  : undefined;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/icon.jpg" />
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{YukinaConfig.title}</title>
<meta name="title" content={YukinaConfig.title} />
<meta name="description" content={YukinaConfig.description} />

<!-- PWA Manifest -->
<link rel="manifest" href="/manifest.json" />
<meta name="theme-color" content="#ffffff" />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={YukinaConfig.title} />
<meta property="og:description" content={YukinaConfig.description} />
{ogImageUrl && <meta property="og:image" content={ogImageUrl} />}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={YukinaConfig.title} />
<meta property="twitter:description" content={YukinaConfig.description} />
{ogImageUrl && <meta property="twitter:image" content={ogImageUrl} />}

<!-- RSS AutoDiscovery -->
<link
  rel="alternate"
  type="application/rss+xml"
  title={YukinaConfig.title}
  href={new URL("rss.xml", Astro.site)}
/>

<!-- SiteMap -->
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- Resource Preload -->
<ResourcePreload />

<!-- Critical CSS -->
<CriticalStyles />

<!-- Fonts - 非同期読み込み -->
<link rel="preconnect" href="https://fonts.bunny.net" />
<link
  rel="preload"
  as="style"
  href="https://fonts.bunny.net/css?family=noto-sans-sc:100,200,300,400,500,600,700,800,900|raleway:500,700"
/>
<link
  rel="stylesheet"
  href="https://fonts.bunny.net/css?family=noto-sans-sc:100,200,300,400,500,600,700,800,900|raleway:500,700"
  media="print"
  onload="this.media='all'"
/>
<noscript>
  <link
    rel="stylesheet"
    href="https://fonts.bunny.net/css?family=noto-sans-sc:100,200,300,400,500,600,700,800,900|raleway:500,700"
  />
</noscript>

<!-- KaTeX CSS - 非同期読み込み -->
<link
  rel="preload"
  as="style"
  href="https://fastly.jsdelivr.net/npm/katex/dist/katex.min.css"
/>
<link
  rel="stylesheet"
  href="https://fastly.jsdelivr.net/npm/katex/dist/katex.min.css"
  media="print"
  onload="this.media='all'"
/>
<noscript>
  <link
    rel="stylesheet"
    href="https://fastly.jsdelivr.net/npm/katex/dist/katex.min.css"
  />
</noscript>

<GlobalStyles />
<AsyncStyles />
<ScriptSetup />
<AnimationController />
<ServiceWorkerSetup />

<!-- ホームページ用の構造化データ -->
{isHomePage && <StructuredData type="website" />}

<!-- カスタムスタイル追加：レイアウトに基づく条件付きスタイリング -->
<style is:global>
  /* ホームレイアウト用のスタイル */
  html[data-layout="home"] .side-bar {
    display: none !important;
  }
  
  /* メインレイアウト用のスタイル */
  html[data-layout="main"] .side-bar {
    display: block !important;
  }
  
  @media (max-width: 1023px) {
    html[data-layout="main"] .side-bar {
      display: none !important;
    }
  }
  
  /* 強制的なスタイル - 明示的にサイドバーIDで指定 */
  #main-sidebar {
    transition: opacity 0.3s ease;
  }
  
  html[data-layout="home"] #main-sidebar {
    opacity: 0;
    pointer-events: none;
    display: none !important;
  }
  
  html[data-layout="main"] #main-sidebar {
    opacity: 1;
    pointer-events: auto;
  }
  
  @media (max-width: 1023px) {
    html[data-layout="main"] #main-sidebar {
      opacity: 0;
      pointer-events: none;
      display: none !important;
    }
  }
</style>

<!-- ViewTransition制御用スクリプト -->
<script>
  // ViewTransitionsのための特別な処理
  function handleTransitionComplete() {
    // URLからページタイプを判断
    const isHomePage = window.location.pathname === '/' || 
                        window.location.pathname === '/index.html';
    
    // 適切なレイアウトを設定
    document.documentElement.dataset.layout = isHomePage ? "home" : "main";
    console.log("BaseHead: transition complete - layout set to", document.documentElement.dataset.layout);
    
    // サイドバーの表示状態も強制的に設定
    const sidebar = document.getElementById('main-sidebar');
    if (sidebar) {
      if (isHomePage) {
        sidebar.style.display = 'none';
      } else if (window.innerWidth >= 1024) {
        sidebar.style.display = 'block';
      }
    }
  }

  // トランジション完了時にレイアウトを確認・設定
  document.addEventListener('astro:page-load', handleTransitionComplete);
  document.addEventListener('astro:after-swap', handleTransitionComplete);
  
  // ページロード時にも実行
  handleTransitionComplete();
</script>
