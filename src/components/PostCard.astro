---
import { IdToSlug } from "../utils/hash";
import { Icon } from "astro-icon/components";
import PostCardInfoIcon from "./widgets/PostCardInfoIcon.astro";
import { GetCoverURLForUnspecifiedEntry } from "../utils/cover";
import { i18n } from "../locales/translation";
import I18nKeys from "../locales/keys";
import YukinaConfig from "../../yukina.config";
import { formatDate } from "../utils/date";
import ResponsiveImage from "./ResponsiveImage.astro";
import type { ReadingMetadata } from "../utils/reading-time";

export interface Props {
  id: string;
  title: string;
  published: Date;
  category?: string;
  tags?: string[];
  description?: string;
  image?: string;
  readingMetadata?: ReadingMetadata;
  lang?: "ja" | "en";
}

const props = Astro.props;
// IDが既にパスを含んでいる場合はそのまま使用し、そうでない場合はIdToSlugを適用
const baseUrl = props.id.startsWith('/') ? props.id : `/posts/${IdToSlug(props.id)}`;
const langParam = props.lang === 'en' ? '?lang=en' : '';
const contentUrl = `${baseUrl}${langParam}`;
const entryID = props.id.startsWith('/') ? props.id.split('/').pop()! : IdToSlug(props.id);
const { time = 0, wordCount = 0 } = props.readingMetadata ?? { time: 0, wordCount: 0 };

// 画像URLを取得（外部URLの場合はそのまま使用）
const imageUrl = props.image ?? GetCoverURLForUnspecifiedEntry(entryID);
const isExternalImage = imageUrl.startsWith('http');
---

<div
  class="flex flex-col rounded-3xl bg-[var(--card-color)] overflow-hidden shadow-sm hover:shadow-md transition-all duration-300 h-full"
>
  <a
    href={contentUrl}
    class="relative h-[200px] transition-all hover:brightness-90"
  >
    <ResponsiveImage
      class="absolute left-0 top-0 h-full w-full object-cover"
      src={imageUrl}
      alt="CoverPost"
      width={400}
      height={200}
    />
    <div class="absolute bottom-2 w-full">
      <div class="mx-2 flex flex-row justify-between">
        <div
          class="flex flex-row items-center space-x-2 rounded-md bg-black/50 px-1.5 py-0.5 text-[var(--primary-color-lighten)] dark:text-[var(--text-color)]"
        >
          <Icon name="cuida:calendar-outline" />
          <span class="select-none">
            {formatDate(props.published, YukinaConfig.locale)}
          </span>
        </div>
        {
          props.category && (
            <div class="flex flex-row items-center space-x-2 rounded-md bg-black/50 px-1.5 py-0.5 text-[var(--primary-color-lighten)] dark:text-[var(--text-color)]">
              <Icon name="dashicons:category" />
              <span class="max-w-28 select-none truncate">
                {props.category}
              </span>
            </div>
          )
        }
      </div>
    </div>
  </a>
  <div class="flex flex-col h-auto min-h-[150px] p-5 flex-grow">
    <div class="flex w-full flex-row items-center mb-3">
        <div
        class="mr-2 h-5 w-1 rounded-lg bg-[var(--primary-color)]"
        >
        </div>
        <a href={contentUrl} class="title">
        <p class="line-clamp-2">{props.title}</p>
          <Icon
            name="cuida:caret-right-outline"
            class="translate-y-[0.07rem] text-[var(--primary-color)]"
          />
        </a>
      </div>
    
    <div>
        <p class="desc">{props.description}</p>
      </div>
    
    <div class="mt-auto pt-3">
      <div class="select-none">
          <div class="reading-time">
            <span>
              {wordCount}
              {i18n(I18nKeys.post_card_words)}
            </span>
            <span>|</span>
            <span>
              {time}
              {i18n(I18nKeys.post_card_minutes)}
            </span>
          </div>
        </div>
    </div>
  </div>
</div>
<style>
  .title {
    @apply flex w-full flex-row items-center space-x-1 align-top text-xl font-semibold text-[var(--text-color)];
    @apply transition-all hover:text-[var(--primary-color)];
    font-family: var(--primary-font);
  }

  .data {
    font-family: var(--primary-font);
    @apply flex flex-row items-center;
  }

  .data > span {
    @apply inline-block self-center truncate align-middle text-[var(--text-color-lighten)];
    font-family: var(--primary-font);
  }

  .desc {
    @apply line-clamp-2 text-[var(--text-color-lighten)];
    font-family: var(--primary-font);
  }

  .reading-time {
    @apply space-x-3 align-middle text-sm text-[var(--text-color-lighten)];
    font-family: var(--primary-font);
  }
</style>
