---
import { Icon } from "astro-icon/components";
import { IdToSlug } from "../utils/hash";
import { GetCoverURLForUnspecifiedEntry } from "../utils/cover";
import { formatDate } from "../utils/date";
import YukinaConfig from "../../yukina.config";
import OptimizedImage from "./OptimizedImage.astro";

export interface Props {
  posts: any[];
  lang?: "ja" | "en";
}

const { posts, lang = "ja" } = Astro.props;
const langParam = lang === 'en' ? '?lang=en' : '';

// 記事の冒頭部分を抽出する関数
function getExcerpt(body: string, maxLength: number = 150): string {
  if (!body) return '';
  
  // Markdownの記法を簡単に除去
  const plainText = body
    .replace(/^#+\s+/gm, '') // 見出し
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // リンク
    .replace(/[*_]{1,2}([^*_]+)[*_]{1,2}/g, '$1') // 強調
    .replace(/`([^`]+)`/g, '$1') // インラインコード
    .replace(/```[\s\S]*?```/g, '') // コードブロック
    .replace(/^>\s+/gm, '') // 引用
    .replace(/^[-*+]\s+/gm, '') // リスト
    .replace(/\n{2,}/g, ' ') // 複数改行
    .replace(/\n/g, ' ') // 改行
    .trim();
  
  // 指定文字数で切り取り
  if (plainText.length <= maxLength) {
    return plainText;
  }
  
  // 文の区切りで自然に切る
  const truncated = plainText.substring(0, maxLength);
  const lastPeriod = truncated.lastIndexOf('。');
  const lastSpace = truncated.lastIndexOf(' ');
  
  let cutIndex = maxLength;
  if (lastPeriod > maxLength * 0.8) {
    cutIndex = lastPeriod + 1;
  } else if (lastSpace > maxLength * 0.8) {
    cutIndex = lastSpace;
  }
  
  return plainText.substring(0, cutIndex) + '...';
}
---

<div class="featured-carousel-container">
  <div class="controls">
    <button class="control-button prev" aria-label="Previous slide">
      <Icon name="line-md:chevron-left" class="control-icon" />
    </button>
    <button class="control-button next" aria-label="Next slide">
      <Icon name="line-md:chevron-right" class="control-icon" />
    </button>
  </div>
  
  <div class="carousel-track-container">
    <div class="carousel-track">
      {posts.map((post, index) => {
        const entryID = IdToSlug(post.id);
        const contentUrl = `/posts/${entryID}${langParam}`;
        const excerpt = getExcerpt(post.body);
        return (
          <div class="carousel-slide">
            <a href={contentUrl} class="slide-content">
              <div class="slide-image-container">
                <OptimizedImage
                  class="slide-image" 
                  src={post.data.cover ?? GetCoverURLForUnspecifiedEntry(entryID)} 
                  alt={post.data.title}
                  width={800}
                  height={400}
                  loading="lazy"
                />
                <div class="slide-overlay">
                  <div class="slide-meta">
                    <span class="slide-date">
                      <Icon name="cuida:calendar-outline" class="slide-icon" />
                      {formatDate(post.data.published, YukinaConfig.locale)}
                    </span>
                    {post.data.category && (
                      <span class="slide-category">
                        <Icon name="dashicons:category" class="slide-icon" />
                        {post.data.category}
                      </span>
                    )}
                  </div>
                  <h3 class="slide-title">{post.data.title}</h3>
                  {post.data.description && (
                    <p class="slide-description">{post.data.description}</p>
                  )}
                  {excerpt && (
                    <p class="slide-excerpt">{excerpt}</p>
                  )}
                  <div class="slide-read-more">
                    <span>{lang === 'ja' ? '続きを読む' : 'Read More'}</span>
                    <Icon name="cuida:caret-right-outline" class="read-more-icon" />
                  </div>
                </div>
              </div>
            </a>
          </div>
        );
      })}
    </div>
  </div>
  
  <div class="carousel-indicators">
    {posts.map((_, index) => (
      <button 
        class={`indicator ${index === 0 ? "active" : ""}`} 
        data-index={index}
        aria-label={`Go to slide ${index + 1}`}
      ></button>
    ))}
  </div>
</div>

<style>
  .featured-carousel-container {
    @apply relative w-full overflow-hidden rounded-2xl;
    height: 400px;
  }
  
  @media (min-width: 768px) {
    .featured-carousel-container {
      height: 400px;
    }
  }
  
  .carousel-track-container {
    @apply w-full h-full overflow-hidden;
  }
  
  .carousel-track {
    @apply flex transition-transform duration-500 h-full;
  }
  
  .carousel-slide {
    @apply flex-none w-full h-full;
  }
  
  .slide-content {
    @apply block w-full h-full relative overflow-hidden;
  }
  
  .slide-image-container {
    @apply relative w-full h-full overflow-hidden;
  }
  
  .slide-image {
    @apply w-full h-full object-cover transition-all duration-500;
  }
  
  .slide-content:hover .slide-image {
    @apply transform scale-105;
  }
  
  .slide-overlay {
    @apply absolute bottom-0 right-0 p-6;
    @apply flex flex-col justify-end;
    background: linear-gradient(to left, rgba(0,0,0,0.98), rgba(0,0,0,0.95), rgba(0,0,0,0.8));
    width: 100%;
  }
  
  /* ライトモードでも暗い背景を維持 */
  :global(.light) .slide-overlay,
  :global([data-theme="light"]) .slide-overlay {
    background: linear-gradient(to left, rgba(0,0,0,0.98), rgba(0,0,0,0.95), rgba(0,0,0,0.8)) !important;
  }
  
  /* ライトモードのテキスト色を強制 */
  :global(.light) .slide-overlay *,
  :global([data-theme="light"]) .slide-overlay * {
    color: white !important;
  }
  
  @media (min-width: 768px) {
    .slide-overlay {
      @apply bottom-auto top-0 h-full justify-center;
      background: linear-gradient(to left, rgba(0,0,0,0.98), rgba(0,0,0,0.95) 40%, rgba(0,0,0,0.9) 70%, rgba(0,0,0,0.7) 90%);
      width: 50%;
      padding-left: 3rem;
    }
    
    /* ライトモードでも暗い背景を維持 */
    :global(.light) .slide-overlay,
    :global([data-theme="light"]) .slide-overlay {
      background: linear-gradient(to left, rgba(0,0,0,0.98), rgba(0,0,0,0.95) 40%, rgba(0,0,0,0.9) 70%, rgba(0,0,0,0.7) 90%) !important;
    }
  }
  
  @media (min-width: 1024px) {
    .slide-overlay {
      width: 45%;
      padding-left: 4rem;
    }
  }
  
  .slide-meta {
    @apply flex flex-wrap gap-3 text-sm;
    color: rgba(255, 255, 255, 0.8) !important;
  }
  
  .slide-date, .slide-category {
    @apply flex items-center gap-1;
  }
  
  .slide-icon {
    @apply w-4 h-4;
  }
  
  .slide-title {
    @apply text-xl font-bold line-clamp-2 mb-2;
    font-family: var(--primary-font);
    color: white !important;
  }
  
  @media (min-width: 768px) {
    .slide-title {
      @apply text-2xl mb-3;
    }
  }
  
  .slide-description {
    @apply text-sm line-clamp-2;
    color: rgba(255, 255, 255, 0.9) !important;
  }
  
  .slide-excerpt {
    @apply text-sm line-clamp-3 mt-2;
    color: rgba(255, 255, 255, 0.8) !important;
  }
  
  @media (min-width: 768px) {
    .slide-excerpt {
      @apply line-clamp-4 text-base;
    }
  }
  
  .slide-read-more {
    @apply flex items-center gap-1 text-sm mt-3 transition-colors font-medium;
    color: white !important;
  }
  
  .slide-read-more:hover {
    color: rgba(255, 255, 255, 0.8) !important;
  }
  
  @media (min-width: 768px) {
    .slide-read-more {
      @apply mt-4;
    }
  }
  
  .read-more-icon {
    @apply w-4 h-4;
  }
  
  .controls {
    @apply absolute top-1/2 left-0 right-0 flex justify-between px-4 -translate-y-1/2 z-10;
  }
  
  .control-button {
    @apply flex items-center justify-center w-10 h-10 rounded-full bg-[var(--card-color)] text-[var(--text-color)] shadow-lg;
    @apply transform transition-all duration-300 hover:scale-110 hover:shadow-xl;
    border: 1px solid var(--border-color);
  }
  
  .control-icon {
    @apply w-6 h-6;
  }
  
  .carousel-indicators {
    @apply absolute bottom-4 left-0 right-0 flex justify-center gap-2 z-10;
  }
  
  .indicator {
    @apply w-2.5 h-2.5 rounded-full bg-[var(--text-color-lighten)] transition-all duration-300;
    @apply cursor-pointer hover:bg-[var(--text-color)];
  }
  
  .indicator.active {
    @apply bg-[var(--primary-color)] w-6;
  }
</style>

<script>
  // カルーセルの初期化関数
  function initCarousel() {
    const track = document.querySelector('.carousel-track');
    const slides = document.querySelectorAll('.carousel-slide');
    const nextButton = document.querySelector('.control-button.next');
    const prevButton = document.querySelector('.control-button.prev');
    const indicators = document.querySelectorAll('.indicator');
    
    if (!track || !slides.length || !nextButton || !prevButton) return;
    
    let currentIndex = 0;
    const slideCount = slides.length;
    
    // Set initial track width
    track.style.width = `${slideCount * 100}%`;
    
    // Set each slide width
    slides.forEach(slide => {
      slide.style.width = `${100 / slideCount}%`;
    });
    
    const updateSlidePosition = (index) => {
      track.style.transform = `translateX(-${index * (100 / slideCount)}%)`;
      
      // Update active indicator
      indicators.forEach((indicator, i) => {
        indicator.classList.toggle('active', i === index);
      });
      
      currentIndex = index;
    };
    
    // Clear existing event listeners
    const newNextButton = nextButton.cloneNode(true);
    const newPrevButton = prevButton.cloneNode(true);
    nextButton.parentNode.replaceChild(newNextButton, nextButton);
    prevButton.parentNode.replaceChild(newPrevButton, prevButton);
    
    // Next slide
    newNextButton.addEventListener('click', () => {
      const nextIndex = (currentIndex + 1) % slideCount;
      updateSlidePosition(nextIndex);
    });
    
    // Previous slide
    newPrevButton.addEventListener('click', () => {
      const prevIndex = (currentIndex - 1 + slideCount) % slideCount;
      updateSlidePosition(prevIndex);
    });
    
    // Clear existing indicator listeners
    indicators.forEach((indicator, index) => {
      const newIndicator = indicator.cloneNode(true);
      indicator.parentNode.replaceChild(newIndicator, indicator);
      
      newIndicator.addEventListener('click', () => {
        updateSlidePosition(index);
      });
    });
    
    // Auto advance slides
    let intervalId = setInterval(() => {
      const nextIndex = (currentIndex + 1) % slideCount;
      updateSlidePosition(nextIndex);
    }, 5000);
    
    // Pause on hover
    track.addEventListener('mouseenter', () => {
      clearInterval(intervalId);
    });
    
    track.addEventListener('mouseleave', () => {
      clearInterval(intervalId);
      intervalId = setInterval(() => {
        const nextIndex = (currentIndex + 1) % slideCount;
        updateSlidePosition(nextIndex);
      }, 5000);
    });
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowRight') {
        const nextIndex = (currentIndex + 1) % slideCount;
        updateSlidePosition(nextIndex);
      } else if (e.key === 'ArrowLeft') {
        const prevIndex = (currentIndex - 1 + slideCount) % slideCount;
        updateSlidePosition(prevIndex);
      }
    });
    
    // Lazy load images
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          const src = img.getAttribute('data-src');
          if (src) {
            img.setAttribute('src', src);
            observer.unobserve(img);
          }
        }
      });
    });
    
    document.querySelectorAll('.lozad').forEach(img => {
      observer.observe(img);
    });
  }

  // Astro's view transitions event
  document.addEventListener('astro:page-load', initCarousel);
  
  // Standard DOM event as fallback
  document.addEventListener('DOMContentLoaded', initCarousel);
  
  // Additional initialization for cases where both events might have already fired
  if (document.readyState === 'complete' || document.readyState === 'interactive') {
    setTimeout(initCarousel, 100);
  }
</script> 