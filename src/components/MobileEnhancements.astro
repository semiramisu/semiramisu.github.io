---
// モバイル体験向上のための機能
---

<!-- Pull to Refresh インジケーター -->
<div class="pull-to-refresh">
  <div class="ptr-spinner">
    <svg class="ptr-icon" viewBox="0 0 24 24">
      <path d="M12 2v4m0 12v4m-8-8h4m12 0h4" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
    </svg>
  </div>
</div>

<!-- スワイプナビゲーションインジケーター -->
<div class="swipe-indicator swipe-left">
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
    <path d="M15 18l-6-6 6-6" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  </svg>
</div>
<div class="swipe-indicator swipe-right">
  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
    <path d="M9 18l6-6-6-6" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
  </svg>
</div>

<style>
  /* Pull to Refresh */
  .pull-to-refresh {
    @apply fixed top-0 left-0 right-0 z-50;
    @apply flex justify-center items-center;
    @apply h-20 -mt-20;
    @apply transition-transform duration-300;
    @apply pointer-events-none;
  }
  
  .pull-to-refresh.visible {
    @apply transform translate-y-20;
  }
  
  .ptr-spinner {
    @apply w-10 h-10 rounded-full;
    @apply bg-[var(--primary-color)] text-white;
    @apply flex items-center justify-center;
    @apply shadow-lg;
  }
  
  .ptr-icon {
    @apply w-6 h-6;
    @apply animate-spin;
  }
  
  /* スワイプインジケーター */
  .swipe-indicator {
    @apply fixed top-1/2 -translate-y-1/2;
    @apply w-12 h-12 rounded-full;
    @apply bg-[var(--primary-color)] text-white;
    @apply flex items-center justify-center;
    @apply opacity-0 scale-0;
    @apply transition-all duration-300;
    @apply pointer-events-none;
    z-index: 100;
  }
  
  .swipe-indicator.active {
    @apply opacity-100 scale-100;
  }
  
  .swipe-left {
    @apply left-4;
  }
  
  .swipe-right {
    @apply right-4;
  }
  
  .swipe-indicator svg {
    @apply w-6 h-6;
  }
  
  /* タッチターゲットの最適化 */
  @media (max-width: 768px) {
    a, button {
      min-height: 48px;
      min-width: 48px;
    }
  }
</style>

<script>
  // Pull to Refresh実装
  function initPullToRefresh() {
    const ptr = document.querySelector('.pull-to-refresh');
    let startY = 0;
    let currentY = 0;
    let pulling = false;
    
    document.addEventListener('touchstart', (e) => {
      if (window.scrollY === 0) {
        startY = e.touches[0].clientY;
        pulling = true;
      }
    }, { passive: true });

    document.addEventListener('touchmove', (e) => {
      if (!pulling) return;

      currentY = e.touches[0].clientY;
      const diff = currentY - startY;

      if (diff <= 0) {
        ptr?.classList.remove('visible');
        if (ptr) ptr.style.transform = '';
        return;
      }

      e.preventDefault();
      const translateY = Math.min(diff, 80);
      ptr?.classList.add('visible');
      if (ptr) ptr.style.transform = `translateY(${translateY}px)`;
    }, { passive: false });

    document.addEventListener('touchend', () => {
      if (!pulling) return;

      const diff = currentY - startY;
      if (diff > 80) {
        // リフレッシュ実行
        ptr?.classList.add('refreshing');
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      } else {
        ptr?.classList.remove('visible');
        if (ptr) ptr.style.transform = '';
      }

      pulling = false;
      startY = 0;
      currentY = 0;
    }, { passive: true });
  }
  
  // スワイプナビゲーション
  function initSwipeNavigation() {
    let touchStartX = 0;
    let touchEndX = 0;
    const threshold = 50;
    
    document.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    }, { passive: true });

    document.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    }, { passive: true });
    
    function handleSwipe() {
      const diff = touchStartX - touchEndX;
      
      if (Math.abs(diff) < threshold) return;
      
      if (diff > 0) {
        // 左スワイプ - 次のページ
        const nextLink = document.querySelector('a[rel="next"]') as HTMLAnchorElement;
        if (nextLink) {
          showSwipeIndicator('right');
          setTimeout(() => {
            nextLink.click();
          }, 300);
        }
      } else {
        // 右スワイプ - 前のページ
        const prevLink = document.querySelector('a[rel="prev"]') as HTMLAnchorElement;
        if (prevLink) {
          showSwipeIndicator('left');
          setTimeout(() => {
            prevLink.click();
          }, 300);
        }
      }
    }
    
    function showSwipeIndicator(direction: 'left' | 'right') {
      const indicator = document.querySelector(`.swipe-${direction}`);
      indicator?.classList.add('active');
      setTimeout(() => {
        indicator?.classList.remove('active');
      }, 600);
    }
  }
  
  // 振動フィードバック
  function hapticFeedback(type: 'light' | 'medium' | 'heavy' = 'light') {
    if ('vibrate' in navigator) {
      const patterns = {
        light: [10],
        medium: [20],
        heavy: [30]
      };
      navigator.vibrate(patterns[type]);
    }
  }
  
  // タッチ可能な要素に振動フィードバックを追加
  function initHapticFeedback() {
    const touchables = document.querySelectorAll('button, a, .nav-item');
    touchables.forEach(element => {
      element.addEventListener('touchstart', () => {
        hapticFeedback('light');
      });
    });
  }
  
  // 初期化
  function initMobileEnhancements() {
    if ('ontouchstart' in window) {
      document.body.classList.add('has-mobile-bottom-nav');
      initPullToRefresh();
      initSwipeNavigation();
      initHapticFeedback();
    }
  }
  
  document.addEventListener('astro:page-load', initMobileEnhancements);
  document.addEventListener('DOMContentLoaded', initMobileEnhancements);
</script>