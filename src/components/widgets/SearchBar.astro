---
import { Icon } from "astro-icon/components";
import { i18n } from "../../locales/translation";
import I18nKeys from "../../locales/keys";
---

<div class="search-container">
  <div class="search-input-container">
    <input 
      type="text" 
      id="search-input" 
      class="search-input" 
      placeholder={i18n(I18nKeys.nav_bar_search_placeholder)}
      aria-label="Search blog posts"
    />
    <Icon name="line-md:search" class="search-icon" />
  </div>
  <div id="search-results" class="search-results"></div>
</div>

<style>
  .search-container {
    @apply relative w-full;
  }

  .search-input-container {
    @apply relative flex items-center w-full;
  }

  .search-input {
    @apply w-full py-3 px-4 pr-10 rounded-full bg-[var(--card-color)] text-[var(--text-color)] border border-transparent;
    @apply focus:outline-none focus:ring-2 focus:ring-[var(--primary-color)] focus:border-transparent;
    @apply transition-all duration-300;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  }

  .search-icon {
    @apply absolute right-4 w-5 h-5 text-[var(--text-color-lighten)];
  }

  .search-results {
    @apply absolute top-full left-0 right-0 mt-2 max-h-96 overflow-y-auto rounded-xl bg-[var(--card-color)] shadow-lg z-50;
    @apply opacity-0 transition-all duration-300;
    visibility: hidden;
    transform: translateY(-10px);
  }

  .search-results.visible {
    @apply opacity-100;
    visibility: visible;
    transform: translateY(0);
  }

  .search-results-list {
    @apply max-h-96 overflow-y-auto;
  }

  .search-result-item {
    @apply block p-3 cursor-pointer;
    @apply hover:bg-[var(--primary-color-lighten)] transition-colors duration-200;
    @apply border-b border-[var(--border-color)] last:border-b-0;
  }

  .search-result-title {
    @apply text-[var(--text-color)] font-medium text-sm mb-1;
    @apply line-clamp-2;
  }

  .search-result-tags {
    @apply flex flex-wrap gap-1;
  }

  .search-result-tag {
    @apply inline-block px-2 py-0.5 text-xs rounded;
    @apply bg-[var(--background-color)] text-[var(--text-color-lighten)];
    @apply border border-[var(--border-color)];
  }

  .search-highlight {
    @apply bg-yellow-200 dark:bg-yellow-800 px-1 rounded;
  }

  /* スクロールバーのスタイル */
  .search-results-list::-webkit-scrollbar {
    width: 6px;
  }

  .search-results-list::-webkit-scrollbar-track {
    @apply bg-transparent;
  }

  .search-results-list::-webkit-scrollbar-thumb {
    @apply bg-[var(--border-color)] rounded-full;
  }

  .search-results-list::-webkit-scrollbar-thumb:hover {
    @apply bg-[var(--text-color-lighten)];
  }
</style>

<script>
  // Pagefind search implementation
  async function initializeSearch() {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const searchResults = document.getElementById('search-results');
    
    if (!searchInput || !searchResults) return;

    const initTarget = searchResults || searchInput;
    if (initTarget.dataset.initialized === 'true') {
      return;
    }

    initTarget.dataset.initialized = 'true';
    
    let pagefind: any = null;
    
    // Pagefindを初期化
    try {
      // @ts-ignore
      if (typeof window.pagefind !== 'undefined') {
        // @ts-ignore
        pagefind = window.pagefind;
      } else {
        // Pagefindスクリプトを動的に読み込む
        const script = document.createElement('script');
        script.src = '/pagefind/pagefind.js';
        document.head.appendChild(script);
        
        // スクリプトの読み込みを待つ
        await new Promise((resolve) => {
          script.onload = resolve;
        });
        
        // @ts-ignore
        if (typeof window.pagefind !== 'undefined') {
          // @ts-ignore
          pagefind = window.pagefind;
        }
      }
    } catch (error) {
      console.error('Pagefind initialization error:', error);
    }
    
    // 検索を実行する関数
    async function performSearch(query: string) {
      if (!query || query.length < 2) {
        searchResults.classList.remove('visible');
        return;
      }
      
      if (!pagefind) {
        searchResults.innerHTML = `
          <div class="p-4 text-center text-[var(--text-color-lighten)]">
            検索機能を初期化中...
          </div>
        `;
        searchResults.classList.add('visible');
        return;
      }
      
      try {
        const search = await pagefind.search(query);
        
        if (search.results.length === 0) {
          searchResults.innerHTML = `
            <div class="p-4 text-center text-[var(--text-color-lighten)]">
              「${query}」に一致する記事が見つかりませんでした
            </div>
          `;
          searchResults.classList.add('visible');
          return;
        }
        
        // 検索結果を表示
        let html = '<div class="search-results-list">';
        for (const result of search.results.slice(0, 8)) {
          const data = await result.data();
          const title = data.meta?.title || data.title || 'Untitled';
          
          // メタデータからタグとカテゴリを抽出
          let tags = [];
          
          // Pagefindのメタデータは文字列として保存されている場合があるので処理
          if (data.meta?.tag) {
            // 単一のタグまたはカンマ区切りのタグ
            tags = typeof data.meta.tag === 'string' 
              ? data.meta.tag.split(',').map((t: string) => t.trim())
              : [data.meta.tag];
          } else if (data.meta?.tags) {
            tags = typeof data.meta.tags === 'string'
              ? data.meta.tags.split(',').map((t: string) => t.trim())
              : data.meta.tags;
          }
          
          // カテゴリも含める
          if (data.meta?.category) {
            tags.unshift(data.meta.category);
          }
          
          const tagsHtml = tags.length > 0 
            ? tags.slice(0, 3).map((tag: string) => `<span class="search-result-tag">${tag}</span>`).join('')
            : '';
          
          html += `
            <a href="${data.url}" class="search-result-item">
              <div class="search-result-title">${title}</div>
              ${tagsHtml ? `<div class="search-result-tags">${tagsHtml}</div>` : ''}
            </a>
          `;
        }
        html += '</div>';
        
        searchResults.innerHTML = html;
        searchResults.classList.add('visible');
      } catch (error) {
        console.error('Search error:', error);
        searchResults.innerHTML = `
          <div class="p-4 text-center text-[var(--text-color-lighten)]">
            検索中にエラーが発生しました
          </div>
        `;
        searchResults.classList.add('visible');
      }
    }
    
    // デバウンス関数
    function debounce(func: Function, delay: number) {
      let timeoutId: NodeJS.Timeout;
      return (...args: any[]) => {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => func.apply(null, args), delay);
      };
    }
    
    const debouncedSearch = debounce(performSearch, 300);
    
    // イベントリスナー
    searchInput.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      debouncedSearch(target.value);
    });
    
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      if (!searchInput.contains(target) && !searchResults.contains(target)) {
        searchResults.classList.remove('visible');
      }
    });
    
    searchInput.addEventListener('focus', () => {
      if (searchInput.value && searchInput.value.length >= 2) {
        debouncedSearch(searchInput.value);
      }
    });
  }
  
  // ページロード時に初期化
  document.addEventListener('DOMContentLoaded', initializeSearch);
  document.addEventListener('astro:page-load', initializeSearch);
</script> 