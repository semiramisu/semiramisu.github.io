---
import MainLayout from "../layouts/MainLayout.astro";
import PostCard from "../components/PostCard.astro";
import { Icon } from "astro-icon/components";
import { getCollection } from "astro:content";
import { IdToSlug } from "../utils/hash";

// すべての投稿を取得
const allPosts = await getCollection("posts");
const postsMap = new Map();

// IDからポストデータへのマップを作成
allPosts.forEach(post => {
  const slug = IdToSlug(post.id);
  postsMap.set(slug, post);
});
---

<MainLayout title="ブックマーク" subTitle="保存した記事">
  <div class="bookmarks-container">
    <div class="bookmarks-header">
      <h1 class="page-title">
        <Icon name="line-md:star-filled" class="title-icon" />
        ブックマーク
      </h1>
      <button id="clear-all-bookmarks" class="clear-button">
        すべて削除
      </button>
    </div>
    
    <div id="bookmarks-content">
      <div class="loading-state">
        <Icon name="line-md:loading-loop" class="loading-icon" />
        <p>ブックマークを読み込み中...</p>
      </div>
    </div>
  </div>
</MainLayout>

<style>
  .bookmarks-container {
    @apply max-w-6xl mx-auto px-4 py-8;
  }
  
  .bookmarks-header {
    @apply flex items-center justify-between mb-8;
  }
  
  .page-title {
    @apply text-3xl font-bold text-[var(--text-color)] flex items-center gap-3;
  }
  
  .title-icon {
    @apply w-8 h-8 text-[var(--primary-color)];
  }
  
  .clear-button {
    @apply px-4 py-2 rounded-lg;
    @apply bg-red-500 text-white hover:bg-red-600;
    @apply transition-colors duration-200;
    @apply text-sm font-medium;
  }
  
  .loading-state {
    @apply text-center py-12;
  }
  
  .loading-icon {
    @apply w-12 h-12 mx-auto mb-4 text-[var(--primary-color)] animate-spin;
  }
  
  .empty-state {
    @apply text-center py-12;
  }
  
  .empty-icon {
    @apply w-16 h-16 mx-auto mb-4 text-[var(--text-color-lighten)];
  }
  
  .empty-state h2 {
    @apply text-xl font-semibold text-[var(--text-color)] mb-2;
  }
  
  .empty-state p {
    @apply text-[var(--text-color-lighten)] mb-6;
  }
  
  .empty-state-link {
    @apply inline-flex items-center gap-2 px-6 py-3 rounded-full;
    @apply bg-[var(--primary-color)] text-white hover:bg-[var(--primary-color-darken)];
    @apply transition-colors duration-200;
  }
  
  .bookmarks-grid {
    @apply grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6;
  }
  
  .bookmark-item {
    @apply relative;
  }
  
  .remove-bookmark {
    @apply absolute top-2 right-2 z-10;
    @apply w-8 h-8 rounded-full;
    @apply bg-white dark:bg-gray-800 shadow-lg;
    @apply flex items-center justify-center;
    @apply text-red-500 hover:text-red-600;
    @apply transition-all duration-200 hover:scale-110;
  }
  
  .remove-bookmark-icon {
    @apply w-5 h-5;
  }
</style>

<script define:vars={{ postsMap: Array.from(postsMap.entries()) }}>
  function initBookmarksPage() {
    const contentEl = document.getElementById('bookmarks-content');
    const clearAllBtn = document.getElementById('clear-all-bookmarks');
    
    if (!contentEl) return;
    
    // ブックマークを取得
    function getBookmarks() {
      const stored = localStorage.getItem('bookmarks');
      return stored ? JSON.parse(stored) : [];
    }
    
    // ブックマークを保存
    function saveBookmarks(bookmarks) {
      localStorage.setItem('bookmarks', JSON.stringify(bookmarks));
    }
    
    // ブックマークを表示
    function displayBookmarks() {
      const bookmarks = getBookmarks();
      
      if (bookmarks.length === 0) {
        contentEl.innerHTML = `
          <div class="empty-state">
            <svg class="empty-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M19 21l-7-5-7 5V5a2 2 0 012-2h10a2 2 0 012 2z"/>
            </svg>
            <h2>ブックマークがありません</h2>
            <p>気に入った記事をブックマークして、後で読み返しましょう</p>
            <a href="/" class="empty-state-link">
              記事を探す
              <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M9 18l6-6-6-6" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </a>
          </div>
        `;
        return;
      }
      
      // ブックマークされた記事を表示
      const postsMapObj = Object.fromEntries(postsMap);
      const bookmarkedPosts = bookmarks
        .map(bookmark => {
          const post = postsMapObj[bookmark.id];
          if (!post) return null;
          
          return {
            ...post,
            bookmarkId: bookmark.id,
            bookmarkTimestamp: bookmark.timestamp
          };
        })
        .filter(Boolean);
      
      if (bookmarkedPosts.length === 0) {
        contentEl.innerHTML = `
          <div class="empty-state">
            <svg class="empty-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <h2>ブックマークした記事が見つかりません</h2>
            <p>記事が削除されたか、移動された可能性があります</p>
          </div>
        `;
        return;
      }
      
      // グリッドレイアウトで表示
      let html = '<div class="bookmarks-grid">';
      
      bookmarkedPosts.forEach(post => {
        const published = new Date(post.data.published).toLocaleDateString('ja-JP');
        const cover = post.data.cover || `/api/og/${post.id}.png`;
        
        html += `
          <div class="bookmark-item" data-bookmark-id="${post.bookmarkId}">
            <button class="remove-bookmark" aria-label="ブックマークを削除">
              <svg class="remove-bookmark-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M6 18L18 6M6 6l12 12" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </button>
            <article class="post-card">
              <a href="/posts/${post.bookmarkId}/" class="card-link">
                <div class="card-image-container">
                  <img src="${cover}" alt="${post.data.title}" class="card-image" loading="lazy" />
                </div>
                <div class="card-content">
                  <h3 class="card-title">${post.data.title}</h3>
                  ${post.data.description ? `<p class="card-description">${post.data.description}</p>` : ''}
                  <div class="card-meta">
                    <span class="card-date">${published}</span>
                    ${post.data.category ? `<span class="card-category">${post.data.category}</span>` : ''}
                  </div>
                </div>
              </a>
            </article>
          </div>
        `;
      });
      
      html += '</div>';
      contentEl.innerHTML = html;
      
      // 削除ボタンのイベントリスナー
      const removeButtons = contentEl.querySelectorAll('.remove-bookmark');
      removeButtons.forEach(btn => {
        btn.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          const item = btn.closest('.bookmark-item');
          const bookmarkId = item?.getAttribute('data-bookmark-id');
          
          if (bookmarkId && confirm('このブックマークを削除しますか？')) {
            removeBookmark(bookmarkId);
          }
        });
      });
    }
    
    // ブックマークを削除
    function removeBookmark(bookmarkId) {
      let bookmarks = getBookmarks();
      bookmarks = bookmarks.filter(b => b.id !== bookmarkId);
      saveBookmarks(bookmarks);
      displayBookmarks();
      
      // トースト通知
      showToast('ブックマークを削除しました');
    }
    
    // すべてのブックマークを削除
    clearAllBtn?.addEventListener('click', () => {
      if (confirm('すべてのブックマークを削除しますか？この操作は取り消せません。')) {
        localStorage.removeItem('bookmarks');
        displayBookmarks();
        showToast('すべてのブックマークを削除しました');
      }
    });
    
    // トースト通知
    function showToast(message) {
      const toast = document.createElement('div');
      toast.className = 'toast-notification';
      toast.textContent = message;
      document.body.appendChild(toast);
      
      setTimeout(() => {
        toast.classList.add('show');
      }, 10);
      
      setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => {
          document.body.removeChild(toast);
        }, 300);
      }, 2000);
    }
    
    // ブックマーク更新イベントを監視
    window.addEventListener('bookmarksUpdated', displayBookmarks);
    
    // 初期表示
    displayBookmarks();
  }
  
  // ページロード時に初期化
  document.addEventListener('astro:page-load', initBookmarksPage);
  document.addEventListener('DOMContentLoaded', initBookmarksPage);
</script>

<style is:global>
  /* PostCardコンポーネントのスタイルを簡略化して再利用 */
  .post-card {
    @apply bg-[var(--card-color)] rounded-xl overflow-hidden;
    @apply shadow-md hover:shadow-xl transition-all duration-300;
    @apply h-full;
  }
  
  .card-link {
    @apply block h-full;
  }
  
  .card-image-container {
    @apply relative h-48 overflow-hidden;
  }
  
  .card-image {
    @apply w-full h-full object-cover;
    @apply transition-transform duration-500;
  }
  
  .post-card:hover .card-image {
    @apply transform scale-105;
  }
  
  .card-content {
    @apply p-6;
  }
  
  .card-title {
    @apply text-lg font-bold text-[var(--text-color)] mb-2;
    @apply line-clamp-2;
  }
  
  .card-description {
    @apply text-sm text-[var(--text-color-lighten)] mb-4;
    @apply line-clamp-2;
  }
  
  .card-meta {
    @apply flex items-center gap-3 text-xs text-[var(--text-color-lighten)];
  }
  
  .card-category {
    @apply px-2 py-1 rounded-full;
    @apply bg-[var(--primary-color-lighten)] text-[var(--primary-color)];
  }
</style>