---
import MainLayout from "../layouts/MainLayout.astro";
import { getCollection } from "astro:content";
import { i18n } from "../locales/translation";

// Get language from URL parameter
const url = new URL(Astro.request.url);
const lang = (url.searchParams.get('lang') === 'en' ? 'en' : 'ja') as "ja" | "en";

// Get all shorts
const allShorts = await getCollection("shorts");
const sortedShorts = allShorts
  .filter(short => !short.data.draft && short.data.lang === lang)
  .sort((a, b) => b.data.published.getTime() - a.data.published.getTime());

// Group shorts by category
const shortsByCategory = sortedShorts.reduce((acc, short) => {
  const category = short.data.category || (lang === 'ja' ? 'その他' : 'Other');
  if (!acc[category]) acc[category] = [];
  acc[category].push(short);
  return acc;
}, {} as Record<string, typeof sortedShorts>);
---

<MainLayout title={lang === 'ja' ? 'Shorts - 技術Tips集' : 'Shorts - Tech Tips'}>
  <div class="shorts-container">
    <!-- Hero Section -->
    <div class="shorts-hero">
      <h1 class="shorts-title">
        <span class="title-icon">⚡</span>
        {lang === 'ja' ? 'Shorts' : 'Shorts'}
      </h1>
      <p class="shorts-description">
        {lang === 'ja' 
          ? '短くて実用的な技術Tipsを集めました。日々の開発に役立つワンポイントアドバイス。' 
          : 'Quick and practical tech tips. One-point advice for your daily development.'}
      </p>
    </div>

    <!-- Shorts Grid -->
    <div class="shorts-grid">
      {sortedShorts.map((short, index) => (
        <article class="short-card" style={`animation-delay: ${index * 0.05}s`}>
          <div class="short-header">
            <time class="short-date">
              {new Date(short.data.published).toLocaleDateString(lang === 'ja' ? 'ja-JP' : 'en-US', {
                month: 'short',
                day: 'numeric',
                year: 'numeric'
              })}
            </time>
            {short.data.category && (
              <span class="short-category">{short.data.category}</span>
            )}
          </div>
          
          <h2 class="short-title">{short.data.title}</h2>
          
          <div class="short-content" set:html={short.rendered?.html} />
          
          {short.data.tags && (
            <div class="short-tags">
              {short.data.tags.map(tag => (
                <a href={`/tags/${tag}${lang === 'en' ? '?lang=en' : ''}`} class="tag-chip">
                  #{tag}
                </a>
              ))}
            </div>
          )}
        </article>
      ))}
    </div>

    <!-- Categories Sidebar for Desktop -->
    <aside class="categories-sidebar desktop-only">
      <h3 class="sidebar-title">
        {lang === 'ja' ? 'カテゴリー別' : 'By Category'}
      </h3>
      <div class="category-list">
        {Object.entries(shortsByCategory).map(([category, shorts]) => (
          <button class="category-filter" data-category={category}>
            <span>{category}</span>
            <span class="category-count">{shorts.length}</span>
          </button>
        ))}
      </div>
    </aside>
  </div>
</MainLayout>

<style>
  .shorts-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
    position: relative;
  }

  /* Hero Section */
  .shorts-hero {
    text-align: center;
    margin-bottom: 3rem;
    padding: 2rem 0;
  }

  .shorts-title {
    @apply text-4xl md:text-5xl font-bold mb-4;
    background: linear-gradient(135deg, var(--primary-color), var(--primary-color-darken));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
  }

  .title-icon {
    -webkit-text-fill-color: initial;
    color: var(--primary-color);
  }

  .shorts-description {
    @apply text-lg text-[var(--text-color-lighten)] max-w-2xl mx-auto;
  }

  /* Shorts Grid */
  .shorts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }

  @media (min-width: 1024px) {
    .shorts-container {
      display: grid;
      grid-template-columns: 1fr 250px;
      gap: 2rem;
      align-items: start;
    }

    .shorts-hero {
      grid-column: 1 / -1;
    }

    .shorts-grid {
      grid-column: 1;
    }
  }

  /* Short Card */
  .short-card {
    @apply p-5 rounded-lg border border-[var(--border-color)] hover:shadow-lg transition-all;
    background: var(--bg-color);
    animation: fadeIn 0.6s ease-out forwards;
    opacity: 0;
    position: relative;
    overflow: hidden;
  }

  .short-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 3px;
    height: 100%;
    background: linear-gradient(to bottom, var(--primary-color), var(--primary-color-darken));
    opacity: 0;
    transition: opacity 0.3s;
  }

  .short-card:hover::before {
    opacity: 1;
  }

  .short-card:hover {
    transform: translateY(-4px);
    border-color: var(--primary-color);
  }

  .short-header {
    @apply flex items-center justify-between mb-3;
  }

  .short-date {
    @apply text-xs text-[var(--text-color-lighten)];
  }

  .short-category {
    @apply text-xs px-2 py-1 rounded-full bg-[var(--primary-color-lighten)] text-[var(--primary-color)];
  }

  .short-title {
    @apply text-lg font-bold mb-3 text-[var(--text-color)];
    line-height: 1.4;
  }

  .short-content {
    @apply text-sm text-[var(--text-color-lighten)] mb-3;
    line-height: 1.6;
  }

  .short-content :global(pre) {
    @apply text-xs p-2 rounded bg-[var(--bg-color-darken)] overflow-x-auto my-2;
  }

  .short-content :global(code) {
    @apply text-xs px-1 py-0.5 rounded bg-[var(--bg-color-darken)] text-[var(--primary-color)];
  }

  .short-content :global(p) {
    @apply mb-2;
  }

  .short-tags {
    @apply flex flex-wrap gap-1.5 mt-3;
  }

  .tag-chip {
    @apply text-xs px-2 py-1 rounded-full bg-[var(--bg-color-darken)] text-[var(--text-color-lighten)] hover:bg-[var(--primary-color)] hover:text-white transition-all;
  }

  /* Categories Sidebar */
  .categories-sidebar {
    position: sticky;
    top: 80px;
    @apply p-4 rounded-lg border border-[var(--border-color)];
    background: var(--bg-color);
  }

  .sidebar-title {
    @apply text-lg font-bold mb-3 text-[var(--text-color)];
    border-bottom: 2px solid var(--primary-color);
    padding-bottom: 0.5rem;
  }

  .category-list {
    @apply space-y-2;
  }

  .category-filter {
    @apply w-full flex items-center justify-between p-2 rounded text-sm hover:bg-[var(--bg-color-darken)] transition-colors text-left;
    background: transparent;
    border: none;
    color: var(--text-color);
    cursor: pointer;
  }

  .category-filter:hover {
    color: var(--primary-color);
  }

  .category-filter.active {
    background: var(--primary-color-lighten);
    color: var(--primary-color);
  }

  .category-count {
    @apply text-xs px-1.5 py-0.5 rounded-full bg-[var(--bg-color-darken)] text-[var(--text-color-lighten)];
  }

  /* Responsive */
  .desktop-only {
    display: none;
  }

  @media (min-width: 1024px) {
    .desktop-only {
      display: block;
    }
  }

  @media (max-width: 640px) {
    .shorts-grid {
      grid-template-columns: 1fr;
    }
  }

  /* Animation */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  // Category filter functionality
  document.addEventListener('DOMContentLoaded', () => {
    const categoryButtons = document.querySelectorAll('.category-filter');
    const shortCards = document.querySelectorAll('.short-card');

    categoryButtons.forEach(button => {
      button.addEventListener('click', () => {
        const category = button.getAttribute('data-category');
        
        // Toggle active state
        categoryButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');

        // Filter shorts
        shortCards.forEach(card => {
          const cardCategory = card.querySelector('.short-category')?.textContent;
          if (category === 'all' || cardCategory === category) {
            (card as HTMLElement).style.display = 'block';
          } else {
            (card as HTMLElement).style.display = 'none';
          }
        });
      });
    });
  });
</script>