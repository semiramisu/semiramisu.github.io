---
import Main from "../layouts/MainLayout.astro";
import Markdown from "../components/Markdown.astro";
import CopyRight from "../components/misc/CopyRight.astro";
import TableOfContents from "../components/TableOfContents.astro";
import ReadingProgress from "../components/ReadingProgress.astro";
import ShareButtons from "../components/ShareButtons.astro";
import RelatedPosts from "../components/RelatedPosts.astro";

interface Props {
  title?: string;
  subTitle?: string;
  bannerImage?: string;
  published?: Date;
  license?: {
    name: string;
    url?: string;
  };
  author?: string;
  sourceLink?: string;
  headings?: {
    depth: number;
    slug: string;
    text: string;
  }[];
  slug?: string;
  currentPost?: any; // 関連記事用
}

const {
  title,
  subTitle,
  bannerImage,
  published,
  license,
  author,
  sourceLink,
  headings = [],
  slug,
  currentPost,
} = Astro.props;

// 記事のURLを構築
const siteUrl = Astro.site?.toString() || '';
const postUrl = slug ? `${siteUrl}posts/${slug}/` : Astro.url.toString();
---

<Main title={title} subTitle={subTitle} bannerImage={bannerImage} isHome={false}>
  <ReadingProgress />
  <div id="post-content-wrapper" class="post-content-wrapper">
    <article id="post-article" class="post-article">
      <div class="article-inner">
      <Markdown>
        <slot />
      </Markdown>
      {
        title && (
          <ShareButtons
            title={title}
            url={postUrl}
            description={subTitle}
          />
        )
      }
      {
        currentPost && (
          <RelatedPosts
            currentPost={currentPost}
            maxPosts={3}
          />
        )
      }
      {
        published && title && (
          <CopyRight
            title={title}
            published={published}
            license={license}
            author={author}
            sourceLink={sourceLink}
          />
        )
      }
    </div>
    </article>
    <aside id="post-toc" class="post-toc">
      <TableOfContents headings={headings} />
    </aside>
  </div>
</Main>

<style is:global>
  /* 強制的にレイアウトを保持するための!importantスタイル */
  .post-content-wrapper {
    display: flex !important;
    width: 100% !important;
    gap: 1.5rem !important;
    min-height: 300px !important;
  }

  .post-article {
    flex: 1 !important;
    background-color: var(--card-color) !important;
    border-radius: 1rem !important;
    padding: 1.5rem !important;
    min-width: 0 !important;
    width: auto !important;
  }

  @media (min-width: 768px) {
    .post-article {
      padding: 2rem 2.5rem !important;
    }
  }

  .article-inner {
    font-size: var(--primary-font);
  }

  .post-toc {
    width: 220px !important;
    flex-shrink: 0 !important;
    display: none !important;
  }

  @media (min-width: 1024px) {
    .post-toc {
      display: block !important;
    }
  }
</style>

<script>
  // MainLayoutのDOM操作を上書きするスクリプト
  document.addEventListener('DOMContentLoaded', () => {
    // MainLayoutのスクリプトの後に実行されるようタイマーを設定
    setTimeout(() => {
      const contentEl = document.querySelector('.content');
      if (contentEl && contentEl instanceof HTMLElement) {
        contentEl.style.width = '100%';
      }
    }, 50);
  });
</script>


