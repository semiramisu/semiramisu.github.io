name: Tweet New Blog Post

on:
  push:
    branches:
      - main
    paths:
      - 'src/contents/posts/*.md'
  workflow_dispatch:

jobs:
  tweet:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && !contains(github.event.head_commit.message, '[skip-tweet]')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            src/contents/posts/*.md
          separator: ','
          
      - name: Debug changed files
        run: |
          echo "Added files: ${{ steps.changed-files.outputs.added_files }}"
          echo "Modified files: ${{ steps.changed-files.outputs.modified_files }}"
          echo "All changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
      
      - name: Process new posts and tweet
        if: steps.changed-files.outputs.added_files != ''
        env:
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
          TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        run: |
          npm install twitter-api-v2 front-matter
          
          cat > tweet-post.js << 'EOF'
          const { TwitterApi } = require('twitter-api-v2');
          const fs = require('fs');
          const fm = require('front-matter');
          const path = require('path');
          
          // Initialize Twitter client
          const client = new TwitterApi({
            appKey: process.env.TWITTER_API_KEY,
            appSecret: process.env.TWITTER_API_SECRET,
            accessToken: process.env.TWITTER_ACCESS_TOKEN,
            accessSecret: process.env.TWITTER_ACCESS_TOKEN_SECRET,
          });
          
          const rwClient = client.readWrite;
          
          async function tweetNewPost() {
            const addedFiles = process.env.ADDED_FILES.split(',').filter(f => f);
            
            for (const file of addedFiles) {
              try {
                console.log(`Processing file: ${file}`);
                
                // Read the markdown file
                const content = fs.readFileSync(file, 'utf8');
                const { attributes } = fm(content);
                
                // Skip drafts
                if (attributes.draft) {
                  console.log(`Skipping draft: ${attributes.title}`);
                  continue;
                }
                
                // Skip if already tweeted (check by looking for tweet marker in git history)
                const tweetedFile = `.github/tweeted/${path.basename(file)}.tweeted`;
                if (fs.existsSync(tweetedFile)) {
                  console.log(`Already tweeted: ${attributes.title}`);
                  continue;
                }
                
                // Generate tweet content
                const postTitle = attributes.title || '„Éñ„É≠„Ç∞„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü';
                const description = attributes.description || '';
                const tags = attributes.tags ? attributes.tags.slice(0, 3).map(tag => `#${tag}`).join(' ') : '';
                
                // Generate slug using SHA256 (same as the blog's hash logic)
                const crypto = require('crypto');
                const fileName = path.basename(file, '.md');
                const slug = crypto.createHash('sha256').update(fileName).digest('hex').substring(0, 8);
                const postUrl = `https://semiramisu.github.io/posts/${slug}`;
                
                // Compose tweet (280 character limit)
                let tweetText = `üìù „Éñ„É≠„Ç∞„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„ÅüÔºÅ\n\n„Äå${postTitle}„Äç\n`;
                if (description) {
                  tweetText += `\n${description.substring(0, 100)}${description.length > 100 ? '...' : ''}\n`;
                }
                tweetText += `\n${tags}\n\nÁ∂ö„Åç„ÅØ„Åì„Å°„Çâüëá\n${postUrl}`;
                
                // Ensure tweet is within character limit
                if (tweetText.length > 280) {
                  const availableSpace = 280 - postUrl.length - tags.length - 50; // Buffer for formatting
                  const truncatedTitle = postTitle.substring(0, Math.min(postTitle.length, availableSpace / 2));
                  const truncatedDesc = description.substring(0, Math.min(description.length, availableSpace / 2));
                  
                  tweetText = `üìù „Éñ„É≠„Ç∞Êõ¥Êñ∞ÔºÅ\n\n„Äå${truncatedTitle}${postTitle.length > truncatedTitle.length ? '...' : ''}„Äç\n`;
                  if (truncatedDesc) {
                    tweetText += `\n${truncatedDesc}...\n`;
                  }
                  tweetText += `\n${tags}\n\n${postUrl}`;
                }
                
                // Send tweet
                console.log('Tweeting:', tweetText);
                const tweet = await rwClient.v2.tweet(tweetText);
                console.log('Tweet sent successfully:', tweet.data.id);
                
                // Mark as tweeted
                fs.mkdirSync(path.dirname(tweetedFile), { recursive: true });
                fs.writeFileSync(tweetedFile, JSON.stringify({
                  tweetId: tweet.data.id,
                  timestamp: new Date().toISOString(),
                  file: file,
                  title: postTitle
                }, null, 2));
                
              } catch (error) {
                console.error(`Error processing ${file}:`, error);
                throw error; // Fail the workflow if tweet fails
              }
            }
          }
          
          tweetNewPost().catch(console.error);
          EOF
          
          ADDED_FILES="${{ steps.changed-files.outputs.added_files }}" node tweet-post.js
      
      - name: Commit tweet markers
        if: steps.changed-files.outputs.added_files != ''
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -d ".github/tweeted" ]; then
            git add .github/tweeted
            git commit -m "chore: Mark posts as tweeted [skip-tweet]" || echo "No tweet markers to commit"
            git push || echo "No changes to push"
          fi