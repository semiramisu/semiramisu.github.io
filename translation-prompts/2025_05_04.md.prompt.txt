以下の日本語のブログ記事を英語に翻訳してください。

翻訳の際の注意点：
1. 技術用語は適切な英語表現を使用してください
2. 日本語特有の表現は、英語圏の読者にも理解しやすいように意訳してください
3. frontmatterのtitle, description, tagsも翻訳してください
4. コードブロックはそのまま残してください
5. 画像パスやリンクはそのまま残してください
6. 自然で読みやすい英語を心がけてください

元の日本語記事:
```markdown
---
title: 読書記録
published: 2025-05-04
description: 世界一流のエンジニアの思考法
tags: [読書,IT]
category: 読書
draft: false
---
# 読書記録

[![世界一流のエンジニアの思考法](https://m.media-amazon.com/images/I/81RO+wECc0L._SY522_.jpg)](https://amzn.asia/d/1EI9yNd)


第4章から最終章までを読んで

# 今のままの自分ではダメだ

4章から最終章まで読んで感じたことは、今のままではまずいという事

ということで自分にとって必要なことをまとめてみる

# コミュニケーションについて

まずは、短く、端的に。

相手は背景情報を知らない

だから懇切丁寧に、となることが一般的

でも、いきなり細かい話をされても理解できない（そりゃそうだ）



**短く、端的に**

相手が理解して、次の疑問が出てきたタイミングでさらに追加情報を話す

まさに英語と同じだ。

まずは結論。

情景描写や細かい内容については後からくっつける

# コーディングについて


コード関連のメモは、他人にシェアできるようにメモしておく

未来の自分に対して、そして引き継ぎもあるしメンターとして活動することもあるので、資産として残す

自分が同じエラーに捕まることもあるし、同僚が同じエラーに捕まることもある

その際直ぐに解決できる資産の量が加速度的なアウトプットにつながる



コーディングは読み物である。コンテキスト情報がないエンジニアが見たさいに、背景情報も分かるような書き方を意識する

クイックコールを使う。聞かれる側もチーム全体の進度が上がるため良い効果がある

特に自分は調べてから質問することが多い。

何が分からないか、だけを明確にして早く質問する

質問で一気に問題や知らないことを吸収して、後から自分で学習した方が効率的

# ディスカッションについて

ディスカッションは、知識のない人が知識を一気に吸収できる場である

即フィードバックが貰えるし、自分の考えをまとめる作業になるので寧ろ初心者のうちにやるべき

賢い、博識な人がやるものではない

話すことで磨かれる場所だと意識しよう

決して批判だけをする場所では何

さらに、「合意できない」ということに合意する力がつく

これは比較や傷つくことからも解放されるし、失敗という概念も無くなるので良い

あなたはこう考えるんだね。と内包できる力がつく

会話力は、互いに知識を高め合い上達するために必要なスキル

# まとめ

どうしたら一番早く成長できるか？

それを念頭に置いて活動すること

恥ずかしいとかどうでも良い

必要なのは成果と成長、挑戦であって恥はどうでも良い




```

翻訳後の英語記事を以下の形式で出力してください:
```markdown
[翻訳された記事の内容]
```